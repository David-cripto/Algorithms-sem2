#include <iostream>
#include <vector>

using std::vector;

class Vertex {
public:
	int color;
	int number;
	int parent;
	int t_ent;
	int t_out;
	Vertex(int number) {
		this->number = number;
	}
};

class Graph {
private:
	bool grey;
	int time;
	vector <Vertex> ans;
	vector <Vertex*> ver;
	vector <vector<Vertex*>> peaks;
public:
	Graph(int n);
	~Graph() {
		for (int i = 0; i < ver.size(); ++i)
			delete ver[i];
	}
	friend void set_peak(Graph& gr, int f_p, int s_p);
	friend void DFS(Graph& gr);
	friend void DFS_vis(Graph& gr, Vertex& u);
	friend void answ(Graph& gr);
};

int main() {
	int n, m;
	std::cin >> n >> m;
	Graph gr(n);
	for (int i = 0; i < m; ++i) {
		int first_p, second_p;
		std::cin >> first_p >> second_p;
		set_peak(gr, first_p, second_p);
	}
	DFS(gr);
	answ(gr);
	return 0;
}

void set_peak(Graph& gr, int f_p, int s_p) {
	gr.peaks[f_p].push_back(gr.ver[s_p]);
}

void DFS(Graph& gr) {
	for (int i = 0; i < gr.ver.size(); ++i) {
		gr.ver[i]->color = 0;
		gr.ver[i]->parent = -1;
	}
	gr.time = 0;
	for (int i = 0; i < gr.ver.size(); ++i) {
		if (gr.ver[i]->color == 0)
			DFS_vis(gr, *gr.ver[i]);
	}
}

void DFS_vis(Graph& gr, Vertex& u) {
	u.t_ent = gr.time;
	gr.time++;
	u.color = 1;
	for (int i = 0; i < gr.peaks[u.number].size(); ++i) {
		if (gr.peaks[u.number][i]->color == 0) {
			gr.peaks[u.number][i]->parent = u.number;
			DFS_vis(gr, *gr.peaks[u.number][i]);
		}
	}
	for (int i = 0; i < gr.peaks[u.number].size(); ++i) {
		if (gr.peaks[u.number][i]->color == 1) {
			gr.grey = true;
			break;
		}
	}
	gr.ans.push_back(u);
	u.color = 2;
	u.t_out = gr.time;
	gr.time++;
}

void answ(Graph& gr) {
	if (!gr.grey) {
		std::cout << "YES" << std::endl;
		for (int i = gr.ans.size() - 1; i >= 0; --i) {
			std::cout << gr.ans[i].number << " ";
		}
	}
	else
		std::cout << "NO" << std::endl;
}

Graph::Graph(int n) {
	for (int i = 0; i < n; ++i) {
		Vertex* temp = new Vertex(i);
		ver.push_back(temp);
		vector<Vertex*> temp1;
		peaks.push_back(temp1);
	}
	grey = false;
	time = 0;
}
