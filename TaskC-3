#include <cmath>
#include <iostream>
#include <set>
#include <vector>

using std::cin;
using std::cout;
using std::make_pair;
using std::pair;
using std::set;
using std::vector;

const long long INF = 10000000000000;

long long prim(vector<vector<pair<int, long long>>>& graph, int n) {
	vector<long long> min_e(n, INF);
	min_e[0] = 0;
	set < pair<long long, int> > q;
	q.insert(make_pair(0, 0));
	vector<bool> is_used(n, false);
	long long ans = 0;
	for (int i = 0; i < n; ++i) {
		int v = q.begin()->second;
		ans += q.begin()->first;
		is_used[v] = true;
		q.erase(q.begin());
		for (int j = 0; j < graph[v].size(); ++j) {
			int to = graph[v][j].first;
			long long cost = graph[v][j].second;
			if (to == v || is_used[to]) {
				continue;
			}
			if (cost < min_e[to]) {
				q.erase(make_pair(min_e[to], to));
				min_e[to] = cost;
				q.insert(make_pair(min_e[to], to));
			}
		}
	}
	return ans;
}

int main() {
	int n, m, ind = 0;
	cin >> n >> m;
	vector<long long> a(n);
	vector<vector<pair<int, long long>>> graph(n);
	for (int i = 0; i < n; ++i) {
		cin >> a[i];
		if (a[i] < a[ind]) {
			ind = i;
		}
	}
	for (int i = 0; i < m; ++i) {
		int x, y;
		long long w;
		cin >> x >> y >> w;
		--x;
		--y;
		graph[x].push_back(make_pair(y, w));
		graph[y].push_back(make_pair(x, w));
	}
	for (int i = 0; i < n; ++i) {
		if (i != ind) {
			graph[ind].push_back(make_pair(i, a[i] + a[ind]));
			graph[i].push_back(make_pair(ind, a[i] + a[ind]));
		}
	}
	cout << prim(graph, n);
	return 0;
}
