#include <algorithm>
#include <iostream>
#include <set>
#include <stack>
#include <vector>

using std::cin;
using std::cout;
using std::make_pair;
using std::pair;
using std::set;
using std::stack;
using std::vector;

const int INF = 100000000000;

void dfs(int s, int t, vector<int>& path, vector<vector<pair<int, pair<int, int>>>>& graph, vector<int>& used) {
    if (s == t) {
        return;
    }
    for (int i = 0; i < graph[s].size(); ++i) {
        if (!used[graph[s][i].first] && graph[s][i].second.second > 0) {
            path[graph[s][i].first] = s;
            used[graph[s][i].first] = true;
            dfs(graph[s][i].first, t, path, graph, used);
            return;
        }
    }
}

int findPath(int source, int target, vector<int>& flow, vector<int>& prev, vector<vector<pair<int, pair<int, int>>>>& graph) {
    stack<int> q;
    q.push(source);
    int cur_vertex;
    flow[source] = INF;
    while (prev[target] == -1 && !q.empty()) {
        cur_vertex = q.top();
        q.pop();
        for (int i = 0; i < graph[cur_vertex].size(); i++) {
            int vertex = graph[cur_vertex][i].first;
            if (graph[cur_vertex][i].second.first > 0 && flow[vertex] == 0) {
                q.push(vertex);
                prev[vertex] = cur_vertex;
                flow[vertex] = graph[cur_vertex][i].second.first;
            }
        }
    }
    if (prev[target] == -1) {
        return 0;
    }
    cur_vertex = target;
    while (cur_vertex != source) {
        int v = prev[cur_vertex];
        bool used = false;
        for (int i = 0; i < graph[v].size(); ++i) {
            if (graph[v][i].first == cur_vertex) {
                graph[v][i].second.first -= flow[target];
                graph[v][i].second.second += flow[target];
                used = true;
                break;
            }
        }
        if (!used) {
            graph[v].push_back({ make_pair(cur_vertex, make_pair(-flow[target], flow[target])) });
        }
        used = false;
        for (int i = 0; i < graph[cur_vertex].size(); ++i) {
            if (graph[cur_vertex][i].first == v) {
                graph[cur_vertex][i].second.first -= flow[target];
                graph[cur_vertex][i].second.second += flow[target];
                used = true;
                break;
            }
        }
        if (!used) {
            graph[cur_vertex].push_back({ make_pair(v, make_pair(flow[target], -flow[target])) });
        }
        cur_vertex = v;
    }
    return flow[target];
}

void maxFlow(int source, int target, int n, vector<vector<pair<int, pair<int, int>>>>& graph) {
    int max_flow = 0;
    int add_flow;
    vector<int> temp(n);
    do
    {
        vector<int> flow(n, 0);
        vector<int> prev(n, -1);
        add_flow = findPath(source, target, flow, prev, graph);
        max_flow += add_flow;
        for (int i = 0; i < add_flow; ++i) {
            int cur_vertex = target;
            while (cur_vertex != source) {
                int v = prev[cur_vertex];
                flow[v] += add_flow;
                flow[cur_vertex] -= add_flow;
                cur_vertex = v;
            }
        }
    } while (add_flow > 0 && max_flow < 2);
    if (max_flow >= 2) {
        cout << "YES" << std::endl;
        vector<int> used(n, 0);
        for (int i = 0; i < 2; ++i) {
            used[target] = false;
            vector<int> ans;
            vector<int> path(n, -1);
            ans.push_back(target);
            dfs(source, target, path, graph, used);
            int j = target;
            while (j != source) {
                int v = path[j];
                ans.push_back(v);
                j = v;
            }
            std::reverse(ans.begin(), ans.end());
            for (int k = 0; k < ans.size(); ++k) {
                cout << ans[k] + 1 << " ";
            }
            cout << std::endl;
        }
    }
    else {
        cout << "NO";
    }
}

int main() {
    int n, m, s, t;
    cin >> n >> m >> s >> t;
    vector<vector<pair<int, pair<int, int>>>> graph(n);
    for (int i = 0; i < m; ++i) {
        int x, y;
        cin >> x >> y;
        graph[x - 1].push_back(make_pair(y - 1, make_pair(1, 0)));
    }
    maxFlow(s - 1, t - 1, n, graph);
    return 0;
}
