#include <algorithm>
#include <cmath>
#include <iostream>
#include <set>
#include <vector>

using std::cin;
using std::cout;
using std::make_pair;
using std::min;
using std::pair;
using std::set;
using std::vector;

const int infinity = 1;
const int self = 0;

void input(vector<vector<pair<int, pair<double, double>>>>& graph, int M) {
	for (int i = 0; i < M; ++i) {
		int a, b;
		double rate_from_a_to_b, commision_from_a_to_b;
		double rate_from_b_to_a, commision_from_b_to_a;
		cin >> a >> b >> rate_from_a_to_b >> commision_from_a_to_b >> rate_from_b_to_a >> commision_from_b_to_a;
		graph[a].push_back(make_pair(b, make_pair(rate_from_a_to_b, commision_from_a_to_b)));
		graph[b].push_back(make_pair(a, make_pair(rate_from_b_to_a, commision_from_b_to_a)));
	}
}

bool fordBelman(vector<vector<pair<int, pair<double, double>>>>& graph, int S, double V, int N, int M) {
	vector<double> d(N, 0);
	d[S] = V;
	int x;
	for (int i = 0; i <= N; ++i) {
		x = -1;
		for (int j = 0; j < graph.size(); ++j) {
			for (int k = 0; k < graph[j].size(); ++k) {
				if (d[graph[j][k].first] < (d[j] - graph[j][k].second.second) * graph[j][k].second.first) {
					d[graph[j][k].first] = (d[j] - graph[j][k].second.second) * graph[j][k].second.first;
					x = k;
				}
			}

		}
	}
	if (x == -1) {
		return false;
	}
	return true;
}

int main() {
	int N, M, S;
	double V;
	cin >> N >> M >> S >> V;
	vector<vector<pair<int, pair<double, double>>>> graph(N + 1);
	input(graph, M);
	if (fordBelman(graph, S, V, N + 1, M)) {
		cout << "YES";
	}
	else {
		cout << "NO";
	}
	return 0;
}
