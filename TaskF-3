#include <cmath>
#include <iostream>
#include <set>
#include <string>
#include <vector>

using std::cin;
using std::cout;
using std::make_pair;
using std::pair;
using std::set;
using std::string;
using std::vector;

void mincut(vector<vector<int>>& g, int n, vector<int>& best_cut) {
	int best_cost = 1000000000;
	vector<vector<int>> v(n);
	for (int i = 0; i < n; ++i) {
		v[i].push_back(i);
	}
	vector<bool>exist(n, true);
	for (int ph = 0; ph < n - 1; ++ph) {
		vector<bool> in_a(n, false);
		vector<int> w(n, 0);
		for (int it = 0, prev; it < n - ph; ++it) {
			int sel = -1;
			for (int i = 0; i < n; ++i) {
				if (exist[i] && !in_a[i] && (sel == -1 || w[i] > w[sel])) {
					sel = i;
				}
			}
			if (it == n - ph - 1) {
				if (w[sel] < best_cost) {
					best_cost = w[sel], best_cut = v[sel];
				}
				v[prev].insert(v[prev].end(), v[sel].begin(), v[sel].end());
				for (int i = 0; i < n; ++i) {
					g[prev][i] = g[i][prev] += g[sel][i];
				}
				exist[sel] = false;
			}
			else {
				in_a[sel] = true;
				for (int i = 0; i < n; ++i) {
					w[i] += g[sel][i];
				}
				prev = sel;
			}
		}
	}
}

void getAns(int n) {
	vector<vector<int>> graph(n, vector<int>(n));
	for (int i = 0; i < n; ++i) {
		string str;
		cin >> str;
		for (int k = 0; k < str.size(); ++k) {
			graph[i][k] = (int)str[k] - 48;
		}
	}
	vector<int> best_cut;
	mincut(graph, n, best_cut);
	for (int i = 0; i < best_cut.size(); ++i) {
		cout << best_cut[i] + 1 << " ";
	}
	cout << std::endl;
	for (int i = 0; i < n; ++i) {
		bool have = false;
		for (int k = 0; k < best_cut.size(); ++k) {
			if (i == best_cut[k]) {
				have = true;
			}
		}
		if (!have) {
			cout << i + 1 << " ";
		}
	}
	cout << std::endl;
}

int main() {
	int n;
	cin >> n;
	getAns(n);
	return 0;
}
