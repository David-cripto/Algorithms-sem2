#include<string>
#include<vector>
#include<iostream>

class BigInteger {
public:
	BigInteger();
	BigInteger(const std::string str);
	BigInteger(const BigInteger& other);
	BigInteger(const int other);
	friend std::istream& operator >> (std::istream& in, BigInteger& temp);
	friend std::ostream& operator << (std::ostream& out, const BigInteger& temp);
	BigInteger& operator = (const BigInteger& other);
	BigInteger& operator += (const BigInteger& other);
	BigInteger& operator -= (const BigInteger& other);
	BigInteger& operator *= (const BigInteger& other);
	BigInteger& operator /= (const BigInteger& other);
	BigInteger& operator %= (const BigInteger& other);
	bool operator < (const BigInteger& other) const;
	bool operator == (const BigInteger& other) const;
	BigInteger& operator++();
	BigInteger& operator--();
	const BigInteger operator++(int);
	const BigInteger operator--(int);
	explicit operator bool();
	explicit operator int();
	explicit operator long long();
	explicit operator char();
	friend BigInteger operator / (const BigInteger& other1, const int other2);
	friend BigInteger operator * (const BigInteger& other1, const int other2);
	friend BigInteger abs(const BigInteger& other);
	std::string toString() const;
	BigInteger operator-()const;
	int get_sign() const;
	void set_sign(int sign);
private:
	std::vector<int> num;
	const size_t base = 10000;
	int sign;
};

std::istream& operator >> (std::istream& in, BigInteger& temp);
std::ostream& operator << (std::ostream& out, const BigInteger& temp);
void fft(std::vector<std::pair<double, double>>& v, bool inv);
BigInteger operator + (const BigInteger& other1, const BigInteger& other2);
BigInteger operator - (const BigInteger& other1, const BigInteger& other2);
BigInteger operator * (const BigInteger& other1, const BigInteger& other2);
BigInteger operator / (const BigInteger& other1, const BigInteger& other2);
BigInteger operator % (const BigInteger& other1, const BigInteger& other2);
bool operator != (const BigInteger& other1, const BigInteger& other2);
bool operator > (const BigInteger& other1, const BigInteger& other2);
bool operator <= (const BigInteger& other1, const BigInteger& other2);
bool operator >= (const BigInteger& other1, const BigInteger& other2);

BigInteger operator / (const BigInteger& other1, const int other2);
BigInteger abs(const BigInteger& other);
int max(int other1, int other2);
int binary(const BigInteger& other1, const BigInteger& other2);
BigInteger operator * (const BigInteger& other1, const int other2);

////////////////////////////////////////////////////////////////////////////////////////

class Rational {
public:
	Rational();
	Rational(const BigInteger num, const BigInteger den = 1);
	Rational(const int num, const int den = 1);
	Rational& operator = (const Rational& other);
	Rational& operator += (const Rational& other);
	Rational& operator -= (const Rational& other);
	Rational& operator *= (const Rational& other);
	Rational& operator /= (const Rational& other);
	Rational operator-() const;
	bool operator < (const Rational& other) const;
	bool operator == (const Rational& other) const;
	std::string toString() const;
	std::string asDecimal(size_t precision = 0);
	explicit operator double();
private:
	BigInteger num;
	BigInteger den;
	const size_t base = 10;
};

Rational operator + (const Rational& other1, const Rational& other2);
Rational operator - (const Rational& other1, const Rational& other2);
Rational operator * (const Rational& other1, const Rational& other2);
Rational operator / (const Rational& other1, const Rational& other2);
bool operator != (const Rational& other1, const Rational& other2);
bool operator > (const Rational& other1, const Rational& other2);
bool operator <= (const Rational& other1, const Rational& other2);
bool operator >= (const Rational& other1, const Rational& other2);

BigInteger Arh(BigInteger& other1, BigInteger& other2);

///////////////////////////////////////////////////////////////////////////////

BigInteger::BigInteger() {
	sign = 1;
}

BigInteger::BigInteger(const std::string str) {
	std::string s = str;
	this->sign = 1;
	//while (!s.empty()) {
	//	if (s.back() == '-') {
	//		this->sign = -1;
	//		s.pop_back();
	//		continue;
	//	}
	//	this->num.push_back(static_cast<int>(s.back()) - 48);
	//	s.pop_back();
	//}
	if (s[0] == '-') {
		this->sign = -1;
		s.erase(0, 1);
	}
	for (int i = static_cast<int>(s.length()); i > 0; i -= 4) {
		if (i < 4)
			this->num.push_back(atoi(s.substr(0, i).c_str()));
		else
			this->num.push_back(atoi(s.substr(i - 4, 4).c_str()));
	}
}

BigInteger::BigInteger(const BigInteger& other) {
	this->sign = other.sign;
	for (size_t i = 0; i < other.num.size(); ++i) {
		this->num.push_back(other.num[i]);
	}
}

BigInteger::BigInteger(int other) {
	int temp = other;
	if (other < 0) {
		this->sign = -1;
		temp = -other;
	}
	else if (!other) {
		this->num.push_back(0);
		this->sign = 1;
	}
	else {
		this->sign = 1;
	}
	while (temp) {
		this->num.push_back(temp % base);
		temp /= base;
	}
}

BigInteger& BigInteger::operator = (const BigInteger& other) {
	if (*this == other) {
		return *this;
	}
	this->sign = other.sign;
	this->num.clear();
	for (size_t i = 0; i < other.num.size(); ++i) {
		this->num.push_back(other.num[i]);
	}
	return *this;
}

BigInteger& BigInteger::operator += (const BigInteger& other) {
	if (this->sign == other.sign) {
		int carry = 0;
		for (int i = 0; i < max(this->num.size(), other.num.size()) || carry; ++i) {
			if (i == static_cast<int>(this->num.size()))
				this->num.push_back(0);
			this->num[i] += carry + (i < static_cast<int>(other.num.size()) ? other.num[i] : 0);
			carry = this->num[i] >= static_cast<int>(base);
			if (carry)  this->num[i] -= base;
		}
		return *this;
	}
	else {
		*this -= (-other);
		if (this->num.size() == 1 && this->num[0] == 0) {
			this->sign = 1;
		}
		return *this;
	}
}

BigInteger& BigInteger::operator-=(const BigInteger& other) {
	if (*this == other) {
		this->sign = 1;
		while (!this->num.empty()) {
			this->num.pop_back();
		}
		this->num.push_back(0);
		return *this;
	}
	else if (this->sign == other.sign) {
		if (abs(*this) >= abs(other)) {
			int carry = 0;
			for (int i = 0; i < static_cast<int>(other.num.size()) || carry; ++i) {
				this->num[i] -= carry + (i < static_cast<int>(other.num.size()) ? other.num[i] : 0);
				carry = this->num[i] < 0;
				if (carry)  this->num[i] += base;
			}
			while (this->num.size() > 1 && this->num.back() == 0)
				this->num.pop_back();
			return *this;
		}
		else {
			if (this->sign == 1) {
				this->sign = -1;
			}
			else if (this->sign == -1) {
				this->sign = 1;
			}
			BigInteger temp = other;
			int carry = 0;
			for (int i = 0; i < static_cast<int>(this->num.size()) || carry; ++i) {
				temp.num[i] -= carry + (i < static_cast<int>(this->num.size()) ? this->num[i] : 0);
				carry = temp.num[i] < 0;
				if (carry)  temp.num[i] += base;
			}
			while (temp.num.size() > 1 && temp.num.back() == 0)
				temp.num.pop_back();
			temp.sign = this->sign;
			*this = temp;
			return *this;
		}
	}
	else {
		*this += (-other);
		return *this;
	}

}

BigInteger& BigInteger::operator*=(const BigInteger& other) {
	other.sign != this->sign ? this->sign = -1 : this->sign = 1;
	std::vector<std::pair<double, double>> fir;
	for (int i = 0; i < static_cast<int>(this->num.size()); ++i) {
		fir.push_back(std::make_pair(this->num[i], 0));
	}
	std::vector<std::pair<double, double>>sec;
	for (int i = 0; i < static_cast<int>(other.num.size()); ++i) {
		sec.push_back(std::make_pair(other.num[i], 0));
	}
	int n = 1;
	while (n < max(other.num.size(), this->num.size())) {
		n *= 2;
	}
	n *= 2;
	fir.resize(n);
	sec.resize(n);
	fft(fir, false);
	fft(sec, false);
	for (int i = 0; i < static_cast<int>(fir.size()); ++i) {
		double a = fir[i].first;
		double b = fir[i].second;
		double c = sec[i].first;
		double d = sec[i].second;
		fir[i].first = a * c - b * d;
		fir[i].second = a * d + b * c;
	}
	fft(fir, true);
	this->num.resize(n);
	int carry = 0;
	for (int i = 0; i < static_cast<int>(fir.size()); ++i) {
		this->num[i] = (static_cast<long long>(fir[i].first + 0.5) + carry) % base;
		carry = (static_cast<long long>(fir[i].first + 0.5) + carry) / base;
	}
	while (this->num.back() == 0 && this->num.size() > 1) {
		this->num.pop_back();
	}
	return *this;
}

BigInteger& BigInteger::operator/=(const BigInteger& other) {
	if (abs(*this) < abs(other)) {
		this->sign = 1;
		while (!this->num.empty()) {
			this->num.pop_back();
		}
		this->num.push_back(0);
		return *this;
	}
	else if (other == 1) {
		return *this;
	}
	else {
		BigInteger temp1 = other > 0 ? other : -other;
		BigInteger temp2 = *this > 0 ? *this : -*this;
		int i = temp2.num.size() - 1;
		BigInteger carry = 0;
		BigInteger temp_f = 0;
		temp_f.num.clear();
		for (int j = temp2.num.size() - temp1.num.size(); j < static_cast<int>(temp2.num.size()); ++j) {
			temp_f.num.push_back(temp2.num[j]);
		}
		i = temp2.num.size() - temp1.num.size() - 1;
		if (temp_f < temp1 && i >= 0) {
			temp_f.num.insert(temp_f.num.begin(), temp2.num[i--]);
		}
		int temp_b = binary(temp_f, temp1);
		BigInteger res = temp_b;
		carry = temp_f - temp1 * temp_b;
		while (i >= 0) {
			carry.num.insert(carry.num.begin(), temp2.num[i--]);
			while (!carry.num.empty() && carry.num.back() == 0) {
				carry.num.pop_back();
			}
			while (carry < temp1 && i >= 0) {
				carry.num.insert(carry.num.begin(), temp2.num[i--]);
				while (!carry.num.empty() && carry.num.back() == 0) {
					carry.num.pop_back();
				}
				res.num.insert(res.num.begin(), 0);
			}
			temp_b = binary(carry, temp1);
			res.num.insert(res.num.begin(), temp_b);
			carry -= temp1 * temp_b;
		}
		res.sign = this->sign == other.sign ? 1 : -1;
		*this = res;
		return *this;
	}
}

int binary(const BigInteger& other1, const BigInteger& other2) {
	int begin = 0;
	int end = 10000;
	int temp = (begin + end) / 2;
	BigInteger res = other2 * temp;
	while (end - begin > 1) {
		if (res < other1) {
			begin = temp;
			temp = (begin + end) / 2;
		}
		else {
			end = temp;
			temp = (begin + end) / 2;
		}
		res = other2 * temp;
	}
	if (other1 >= other2 * end) {
		return end;
	}
	return temp;
}

BigInteger operator*(const BigInteger& other1, const int other2) {
	int carry = 0;
	BigInteger temp = other1;
	for (int i = 0; i < static_cast<int>(temp.num.size()) || carry; ++i) {
		if (i == static_cast<int>(temp.num.size()))
			temp.num.push_back(0);
		long long cur = carry + temp.num[i] * static_cast<long long>(other2);
		temp.num[i] = int(cur % other1.base);
		carry = int(cur / other1.base);
	}
	while (temp.num.size() > 1 && temp.num.back() == 0)
		temp.num.pop_back();
	return temp;
}

BigInteger& BigInteger::operator%=(const BigInteger& other) {
	*this -= (*this / other) * other;
	return *this;
}

bool BigInteger::operator<(const BigInteger& other) const {
	if (this->sign == -1 && other.sign == 1) {
		return true;
	}
	else if (this->sign == 1 && other.sign == -1) {
		return false;
	}
	else if (this->sign == 1 && other.sign == 1) {
		if (this->num.size() < other.num.size()) {
			return true;
		}
		else if (this->num.size() > other.num.size()) {
			return false;
		}
		else {
			for (int i = this->num.size() - 1; i >= 0; --i) {
				if (this->num[i] < other.num[i]) {
					return true;
				}
				else if (this->num[i] > other.num[i]) {
					return false;
				}
			}
			return false;
		}
	}
	else {
		if (this->num.size() < other.num.size()) {
			return false;
		}
		else if (this->num.size() > other.num.size()) {
			return true;
		}
		else {
			for (int i = this->num.size() - 1; i >= 0; --i) {
				if (this->num[i] < other.num[i]) {
					return false;
				}
				else if (this->num[i] > other.num[i]) {
					return true;
				}
			}
			return false;
		}
	}
}

bool BigInteger::operator==(const BigInteger& other) const {
	if ((this->sign == -1 && other.sign == 1) || (this->sign == 1 && other.sign == -1)) {
		return false;
	}
	else {
		if ((this->num.size() < other.num.size()) || (this->num.size() > other.num.size())) {
			return false;
		}
		else {
			bool temp = true;
			for (int i = this->num.size() - 1; i >= 0; --i) {
				if (this->num[i] != other.num[i]) {
					temp = false;
					break;
				}
			}
			return temp;
		}
	}
}

BigInteger& BigInteger::operator++() {
	BigInteger temp;
	temp.num.push_back(1);
	*this += temp;
	return *this;
}

BigInteger& BigInteger::operator--() {
	BigInteger temp;
	temp.num.push_back(1);
	*this -= temp;
	return *this;
}

const BigInteger BigInteger::operator++(int) {
	BigInteger temp;
	temp.num.push_back(1);
	BigInteger res = *this;
	*this += temp;
	return res;
}

const BigInteger BigInteger::operator--(int) {
	BigInteger temp;
	temp.num.push_back(1);
	BigInteger res = *this;
	*this -= temp;
	return res;
}

BigInteger::operator bool() {
	if (this->num.size() == 1 && this->num[0] == 0) {
		return false;
	}
	else {
		return true;
	}
}

BigInteger::operator int() {
	int temp = 0;
	for (int i = 0, j = 1; i < static_cast<int>(this->num.size()); ++i, j *= base) {
		temp += this->num[i] * j;
	}
	if (this->sign == -1) {
		temp *= -1;
	}
	return temp;
}

BigInteger::operator long long() {
	long long temp = 0;
	long long j = 1;
	for (int i = 0; i < static_cast<int>(this->num.size()); ++i) {
		temp += static_cast<long long>(this->num[i] * j);
		j *= base;
	}
	if (this->sign == -1) {
		temp *= -1;
	}
	return temp;
}

BigInteger::operator char() {
	int temp = 0;
	for (int i = 0, j = 1; i < static_cast<int>(this->num.size()); ++i, j *= base) {
		temp += this->num[i] * j;
	}
	if (this->sign == -1) {
		temp *= -1;
	}
	char a = temp;
	return a;
}

std::string BigInteger::toString() const {
	std::string s;
	if (abs(*this) == 0) {
		s.push_back('0');
		return s;
	}
	if (this->sign == -1) {
		char a = '-';
		s.push_back(a);
	}
	s += std::to_string(num[num.size() - 1]);
	for (int i = 1; i < static_cast<int>(this->num.size()); i++) {
		std::string tmp = std::to_string(num[num.size() - 1 - i]);
		for (int j = 0; j < static_cast<int>(4 - tmp.size()); ++j) {
			s += "0";
		}
		s += std::to_string(num[num.size() - 1 - i]);
	}
	return s;
}

BigInteger BigInteger::operator-() const {
	BigInteger temp = *this;
	if (temp.sign == 1) {
		temp.sign = -1;
	}
	else {
		temp.sign = 1;
	}
	return temp;
}

int BigInteger::get_sign() const {
	return this->sign;
}

void BigInteger::set_sign(int sign) {
	this->sign = sign;
}

std::istream& operator >> (std::istream& in, BigInteger& temp) {
	std::string s;
	in >> s;
	BigInteger temp1 = BigInteger(s);
	temp = temp1;
	return in;
}

std::ostream& operator << (std::ostream& out, const BigInteger& temp) {
	std::string s = temp.toString();
	out << s;
	return out;
}

void fft(std::vector<std::pair<double, double>>& v, bool inv) {
	if (v.size() == 1) { return; }
	const double PI = 3.14159265359;
	std::vector<std::pair<double, double>> temp1;
	std::vector<std::pair<double, double>> temp2;
	for (int i = 0, j = 0; i < static_cast<int>(v.size() / 2); ++i, j += 2) {
		temp1.push_back(v[j]);
		temp2.push_back(v[j + 1]);
	}
	fft(temp1, inv);
	fft(temp2, inv);
	double temp;
	if (inv) { temp = 2 * PI * (-1) / v.size(); }
	else { temp = 2 * PI / v.size(); }
	std::pair<double, double> w;
	w.first = 1;
	w.second = 0;
	std::pair<double, double> wn;
	wn.first = cos(temp);
	wn.second = sin(temp);
	for (int i = 0; i < static_cast<int>(v.size() / 2); ++i) {
		double a = w.first;
		double b = w.second;
		double c = temp2[i].first;
		double d = temp2[i].second;
		temp2[i].first = c * a - d * b;
		temp2[i].second = c * b + d * a;
		v[i].first = temp1[i].first + temp2[i].first;
		v[i].second = temp1[i].second + temp2[i].second;
		v[i + v.size() / 2].first = temp1[i].first - temp2[i].first;
		v[i + v.size() / 2].second = temp1[i].second - temp2[i].second;
		if (inv) {
			v[i].first /= 2;
			v[i].second /= 2;
			v[i + v.size() / 2].first /= 2;
			v[i + v.size() / 2].second /= 2;
		}
		c = wn.first;
		d = wn.second;
		w.first = a * c - b * d;
		w.second = a * d + b * c;
	}
}

BigInteger operator+(const BigInteger& other1, const BigInteger& other2) {
	BigInteger a = other1;
	a += other2;
	return a;
}

BigInteger operator-(const BigInteger& other1, const BigInteger& other2) {
	BigInteger a = other1;
	a -= other2;
	return a;
}

BigInteger operator*(const BigInteger& other1, const BigInteger& other2) {
	BigInteger a = other1;
	a *= other2;
	return a;
}

BigInteger operator/(const BigInteger& other1, const BigInteger& other2) {
	BigInteger a = other1;
	a /= other2;
	return a;
}

BigInteger operator % (const BigInteger& other1, const BigInteger& other2) {
	BigInteger a = other1;
	a %= other2;
	return a;
}

bool operator!=(const BigInteger& other1, const BigInteger& other2) {
	if (other1 == other2) { return false; }
	else { return true; }
}

bool operator>(const BigInteger& other1, const BigInteger& other2) {
	if (other2 < other1) { return true; }
	else { return false; }
}

bool operator <= (const BigInteger& other1, const BigInteger& other2) {
	if (other1 < other2 || other1 == other2) { return true; }
	else { return false; }
}

bool operator >= (const BigInteger& other1, const BigInteger& other2) {
	if (other1 > other2 || other1 == other2) { return true; }
	else { return false; }
}

BigInteger operator / (const BigInteger& other1, const int other2) {
	BigInteger temp = other1;
	int carry = 0;
	for (int i = temp.num.size() - 1; i >= 0; --i) {
		long long cur = temp.num[i] + carry * static_cast<long long>(temp.base);
		temp.num[i] = static_cast<int>(cur / other2);
		carry = static_cast<int>(cur % other2);
	}
	while (temp.num.size() > 1 && temp.num.back() == 0)
		temp.num.pop_back();
	return temp;
}

BigInteger abs(const BigInteger& other) {
	if (other.sign == 1) { return other; }
	else { return -other; }
}

int max(int other1, int other2) {
	return other1 < other2 ? other2 : other1;
}

////////////////////////////////////////////////////////////////////////////////

Rational::Rational() {
	this->num = 0;
	this->den = 1;
}

Rational::Rational(const BigInteger num, const BigInteger den) {
	this->num = abs(num);
	this->den = abs(den) > 0 ? abs(den) : 1;
	if (this->num != 0) {
		BigInteger temp = Arh(this->num, this->den);
		this->den /= temp;
		this->num /= temp;
	}
	this->num.set_sign(num.get_sign() * den.get_sign());
}

Rational::Rational(const int num, const int den) {
	this->num = abs(num);
	this->den = abs(den) > 0 ? abs(den) : 1;
	if (this->num != 0) {
		BigInteger temp = Arh(this->num, this->den);
		this->den /= temp;
		this->num /= temp;
	}
	if (num == 0) {
		this->num.set_sign(1);
	}
	else {
		this->num.set_sign((num / abs(num)) * (den / abs(den)) >= 0 ? 1 : -1);
	}

}

Rational& Rational::operator=(const Rational& other) {
	this->num.set_sign(other.num.get_sign());
	this->num = other.num;
	this->den = other.den;
	return *this;
}

Rational& Rational::operator+=(const Rational& other) {
	this->num = this->num * other.den + this->den * other.num;
	this->den = this->den * other.den;
	if (this->num != 0) {
		BigInteger temp1 = abs(this->den);
		BigInteger temp2 = abs(this->num);
		BigInteger temp = Arh(temp1, temp2);
		this->den /= temp;
		this->num /= temp;
	}
	return *this;
}

Rational& Rational::operator-=(const Rational& other) {
	this->num = this->num * other.den - this->den * other.num;
	this->den = this->den * other.den;
	if (this->num != 0) {
		BigInteger temp1 = abs(this->den);
		BigInteger temp2 = abs(this->num);
		BigInteger temp = Arh(temp1, temp2);
		this->den /= temp;
		this->num /= temp;
	}
	return *this;
}

Rational& Rational::operator *= (const Rational& other) {
	this->num *= other.num;
	this->den *= other.den;
	if (this->num != 0) {
		BigInteger temp1 = abs(this->den);
		BigInteger temp2 = abs(this->num);
		BigInteger temp = Arh(temp1, temp2);
		this->den /= temp;
		this->num /= temp;
	}
	return *this;
}

Rational& Rational::operator /= (const Rational& other) {
	this->num *= other.den;
	this->den *= other.num;
	if (this->num != 0) {
		BigInteger temp1 = abs(this->den);
		BigInteger temp2 = abs(this->num);
		BigInteger temp = Arh(temp1, temp2);
		this->den /= temp;
		this->num /= temp;
	}
	if (this->num == 0) {
		this->num.set_sign(1);
	}
	else {
		this->num.set_sign(this->num.get_sign() * this->den.get_sign());
	}
	this->den.set_sign(1);
	return *this;
}

Rational Rational::operator-() const {
	Rational temp;
	temp = *this;
	if (temp.num.get_sign() == 1) {
		temp.num.set_sign(-1);
	}
	else {
		temp.num.set_sign(1);
	}
	return temp;
}

bool Rational::operator<(const Rational& other) const {
	if (other.num.get_sign() == this->num.get_sign()) {
		if (other.num.get_sign() == 1) {
			return other.den * this->num < other.num * this->den;
		}
		else {
			return other.den * this->num > other.num* this->den;
		}
	}
	else {
		return this->num.get_sign() == 1 ? false : true;
	}
}

bool Rational::operator==(const Rational& other) const {
	return this->num * other.den == this->den * other.num;
}

Rational operator+(const Rational& other1, const Rational& other2) {
	Rational a;
	a = other1;
	a += other2;
	return a;
}

Rational operator-(const Rational& other1, const Rational& other2) {
	Rational a;
	a = other1;
	a -= other2;
	return a;
}

Rational operator*(const Rational& other1, const Rational& other2) {
	Rational a;
	a = other1;
	a *= other2;
	return a;
}

Rational operator/(const Rational& other1, const Rational& other2) {
	Rational a;
	a = other1;
	a /= other2;
	return a;
}

bool operator!=(const Rational& other1, const Rational& other2) {
	return !(other1 == other2);
}

bool operator>(const Rational& other1, const Rational& other2) {
	return !(other1 <= other2);
}

bool operator<=(const Rational& other1, const Rational& other2) {
	return other1 < other2 || other1 == other2;
}

bool operator>=(const Rational& other1, const Rational& other2) {
	return !(other1 < other2);
}

BigInteger Arh(BigInteger& other1, BigInteger& other2) {
	BigInteger a = other1 >= 0 ? other1 : -other1;
	BigInteger b = other2 >= 0 ? other2 : -other2;
	while (a != 0 && b != 0) {
		a > b ? a %= b : b %= a;
	}
	return a + b;
}

std::string Rational::toString() const {
	std::string s;
	if (abs(this->num) == 0) {
		s.push_back('0');
		return s;
	}
	s += this->num.toString();
	if (this->den != 1) {
		s.push_back('/');
		s += this->den.toString();
	}
	return s;
}

std::string Rational::asDecimal(size_t precision) {
	std::string s;
	if (this->num / this->den == 0 && this->num.get_sign() == -1) {
		s.push_back('-');
	}
	s += (this->num / this->den).toString();
	if (precision > 0) {
		s.push_back('.');
	}
	BigInteger temp = abs(this->num) % this->den;
	while (precision > 1) {
		temp *= 10;
		s.push_back(static_cast<char>(static_cast<int>(temp / this->den) + 48));
		temp %= this->den;
		precision--;
	}
	temp *= 10;
	if (static_cast<int>(temp / this->den) >= 5) {
		s.push_back(static_cast<char>(static_cast<int>(temp / this->den) + 1 + 48));
	}
	else {
		s.push_back(static_cast<char>(static_cast<int>(temp / this->den) + 48));
	}
	return s;
}

Rational::operator double() {
	long long num = static_cast<long long>(this->num);
	long long den = static_cast<long long>(this->den);
	return static_cast<double>((double)num / ((double)den));
}
