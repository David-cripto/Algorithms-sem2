#include <iostream>
#include <vector>

using std::vector;

class Graph {
private:
	class Gr_el {
	public:
		int color;
		int number;
		int parent;
		int t_ent;
		int t_out;
		Gr_el(int number) {
			this->number = number;
		}
	};
	bool grey;
	int time;
	vector <Gr_el> ans;
	vector <Gr_el*> ver;
	vector <vector<Gr_el*>> peaks;
public:
	Graph(int n);
	~Graph() {
		for (int i = 0; i < ver.size(); ++i)
			delete ver[i];
	}
	void set_peak(int f_p, int s_p);
	void DFS();
	void DFS_vis(Gr_el& u);
	void answ();
};

int main() {
	int n, m;
	std::cin >> n >> m;
	Graph gr(n);
	for (int i = 0; i < m; ++i) {
		int first_p, second_p;
		std::cin >> first_p >> second_p;
		gr.set_peak(first_p, second_p);
	}
	gr.DFS();
	gr.answ();
	return 0;
}

void Graph::set_peak(int f_p, int s_p) {
	peaks[f_p].push_back(ver[s_p]);
}

void Graph::DFS(){
	for (int i = 0; i < ver.size(); ++i) {
		ver[i]->color = 0;
		ver[i]->parent = -1;
	}
	time = 0;
	for (int i = 0; i < ver.size(); ++i) {
		if (ver[i]->color == 0) 
			DFS_vis(*ver[i]);
	}
}

void Graph::DFS_vis(Gr_el& u){
	u.t_ent = time;
	time++;
	u.color = 1;
	for (int i = 0; i < peaks[u.number].size(); ++i) {
		if (peaks[u.number][i]->color == 0) {
			peaks[u.number][i]->parent = u.number;
			DFS_vis(*peaks[u.number][i]);
		}
	}
	for (int i = 0; i < peaks[u.number].size(); ++i) {
		if (peaks[u.number][i]->color == 1) {
			grey = true;
			break;
		}
	}
	ans.push_back(u);
	u.color = 2;
	u.t_out = time;
	time++;
}

void Graph::answ(){
	if (!grey) {
		std::cout << "YES" << std::endl;
		for (int i = ans.size() - 1; i >= 0; --i) {
			std::cout << ans[i].number << " ";
		}
	}
	else
		std::cout << "NO" << std::endl;
}

Graph::Graph(int n) {
	for (int i = 0; i < n; ++i) {
		Gr_el* temp = new Gr_el(i);
		ver.push_back(temp);
		vector<Gr_el*> temp1;
		peaks.push_back(temp1);
	}
	grey = false;
	time = 0;
}
